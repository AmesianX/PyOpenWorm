from six.moves.urllib.parse import urlparse, unquote
from six.moves.urllib.request import Request, urlopen
from six.moves.urllib.error import HTTPError, URLError
import re
import logging
from yarom.graphObject import IdentifierMissingException

from .dataObject import DataObject

logger = logging.getLogger(__file__)


def _pubmed_uri_to_pmid(uri):
    parsed = urlparse(uri)
    pmid = int(parsed.path.split("/")[2])
    return pmid


def _doi_uri_to_doi(uri):
    parsed = urlparse(uri)
    doi = parsed.path.split("/")[1]
    # the doi from a url needs to be decoded
    doi = unquote(doi)
    return doi


def _url_request(url, headers={}):
    try:
        r = Request(url, headers=headers)
        s = urlopen(r, timeout=1)
        info = dict(s.info())
        content_type = {k.lower(): info[k] for k in info}['content-type']
        md = re.search("charset *= *([^ ]+)", content_type)
        if md:
            s.charset = md.group(1)

        return s
    except HTTPError:
        return ""
    except URLError:
        return ""


def _json_request(url):
    import json
    headers = {'Content-Type': 'application/json'}
    try:
        data = _url_request(url, headers).read().decode('UTF-8')
        if hasattr(data, 'charset'):
            return json.loads(data, encoding=data.charset)
        else:
            return json.loads(data)
    except BaseException:
        logger.warning("Couldn't retrieve JSON data from " + url,
                       exc_info=True)
        return {}


# A little bit about why this a separate type from Document:
#
# This type corresponds to a document which has some statements that we care
# about. The key reason this is distinct from Document is that a document need
# not provide evidence of anything. For example, the `WormData.n4` file
# generated by insert_worm.py is a document, but it doesn't provide any
# scientific or logical justification for any of the statements made within it.
class Document(DataObject):

    """
    A representation of some document.

    Possible keys include::

        pmid, pubmed: a pubmed id or url (e.g., 24098140)
        wbid, wormbase: a wormbase id or url (e.g., WBPaper00044287)
        doi: a Digitial Object id or url (e.g., s00454-010-9273-0)


    Attributes
    ----------
    doi : DatatypeProperty
        A Digital Object Identifier (DOI), optional
    pmid : DatatypeProperty
        A PubMed ID (PMID) that points to a paper, optional
    wormbaseid : DatatypeProperty
        An ID from WormBase that points to a record, optional
    author : DatatypeProperty
        The author of the document
    title : DatatypeProperty
        The title of the document
    year : DatatypeProperty
        The date (e.g., publication date) of the evidence
    uri : DatatypeProperty
        A URL that points to evidence
    """
    # class_context = 'http://openworm.org/schema'
    # rdf_namespace = Namespace("http://openworm.org/entities/")

    def __init__(
            self,
            author=None,
            uri=None,
            year=None,
            date=None,
            title=None,
            doi=None,
            wbid=None,
            wormbaseid=None,
            wormbase=None,
            bibtex=None,
            pmid=None,
            pubmed=None,
            **kwargs):
        """
        Parameters
        ----------
        doi : string
            A Digital Object Identifier (DOI), optional
        pmid : string
            A PubMed ID (PMID) that points to a paper, optional
        wormbaseid : string
            An ID from WormBase that points to a record, optional
        author : string
            The author of the evidence
        title : string
            The title of the evidence
        year : string or int
            The date (e.g., publication date) of the evidence
        uri : string
            A URL that points to evidence
        """
        super(Document, self).__init__(**kwargs)
        self._fields = dict()

        multivalued_fields = ('author', 'uri')
        other_fields = ('year', 'title', 'doi', 'wbid', 'pmid')
        self.id_precedence = ('doi', 'pmid', 'wbid', 'uri')
        for x in multivalued_fields:
            Document.DatatypeProperty(x, multiple=True, owner=self)

        for x in other_fields:
            Document.DatatypeProperty(x, owner=self)

        if pmid is not None:
            self._fields['pmid'] = pmid
        elif pubmed is not None:
            self._fields['pmid'] = pubmed

        if 'pmid' in self._fields:
            self._pubmed_extract()
            self.pmid(self._fields['pmid'])

        if wbid is not None:
            self._fields['wormbase'] = wbid
        elif wormbase is not None:
            self._fields['wormbase'] = wormbase
        elif wormbaseid is not None:
            self._fields['wormbase'] = wormbaseid

        if 'wormbase' in self._fields:
            self._wormbase_extract()
            self.wbid(self._fields['wormbase'])

        if doi is not None:
            self._fields['doi'] = doi
            self._crossref_doi_extract()
            self.doi(doi)

        if bibtex is not None:
            self._fields['bibtex'] = bibtex

        if year is not None:
            self.year(year)
        elif date is not None:
            self.year(date)

        if title is not None:
            self.title(title)

        if author is not None:
            self.author(author)

        if uri is not None:
            self.uri(uri)

    def defined_augment(self):
        for x in self.id_precedence:
            if getattr(self, x).has_defined_value():
                return True
        return False

    def identifier_augment(self):
        for idKind in self.id_precedence:
            idprop = getattr(self, idKind)
            if idprop.has_defined_value():
                s = str(idKind) + ":" + idprop.defined_values[0].identifier.n3()
                return self.make_identifier(s)
        raise IdentifierMissingException(self)


__yarom_mapped_classes__ = (Document,)
